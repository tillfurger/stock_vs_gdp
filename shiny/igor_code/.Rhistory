# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
# Load data (how?)
clean_gdp_data_US <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_gdp_data.csv")
clean_stock_data_spy500 <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_stock_data.csv")
#add variable defining interval of values
clean_gdp_data_US$interval <- "Quarterly"
View(clean_gdp_data_US)
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
# Load data (how?)
clean_gdp_data_US <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_gdp_data.csv")
clean_stock_data_spy500 <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_stock_data.csv")
#add variable defining interval of values
clean_gdp_data_US$interval <- "Quarterly"
clean_stock_data_spy500$interval <- "Quarterly"
clean_gdp_data_US$type <- "US_gdp"
clean_stock_data_spy500$type <- "spy500"
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Stock vs Gdp"),
sidebarLayout(                              #layout with input and output definitions
sidebarPanel(                             #sidebar panel for inputs
# Select type of data to plot
selectInput(inputId = "Interval", label = strong("Interval"),
choices = unique(clean_gdp_data_US$interval),
selected = "Quarterly"),
# # Select date range to be plotted
# dateRangeInput("date", strong("Date range"), start = "2000-01-01", end = "2022-11-01",
#                min = "2000-01-01", max = "2022-11-01"),
),
# Output: Description, lineplot, and reference (main panel for displaying outputs)
mainPanel(
plotOutput(outputId = "lineplot", height = "300px"),
textOutput(outputId = "desc"),
)
)
)
# Define server function
server <- function(input, output) {
# Subset data
selected_intervals <- reactive({
clean_gdp_data_US %>%
filter(interval == input$Interval)
})
# Create scatterplot object the plotOutput function is expecting
output$lineplot <- renderPlot({
color = "#434343"
par(mar = c(4, 4, 1, 1))
plot(x = selected_intervals()$date, y = selected_intervals()$value, type = "l",
xlab = "Date", ylab = "GDP", col = color, fg = color, col.lab = color, col.axis = color)
# Display only if smoother is checked
# if(input$smoother){
#   smooth_curve <- lowess(x = as.numeric(selected_intervals()$date), y = selected_intervals()$close, f = input$f)
#   lines(smooth_curve, col = "#E6553A", lwd = 3)
# }
})
# # Pull in description of interval
# output$desc <- renderText({
#   interval_text <- filter(clean_gdp_data, type == input$Interval) %>% pull(Interval)
#   paste(interval_text, "Blabla.")
# })
}
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
source("datafeed.R")
setwd("~/Dropbox/HS22/Digital Tools for Finance/stock_vs_gdp/igor_code")
source("datafeed.R")
source("helpers.R")
source("helper.R")
# user interface is defined here
ui <- fluidPage(
titlePanel(h1("market betas vs. average returns")),
sidebarLayout(
sidebarPanel(
h2("controls"),
br(),
selectInput("frequency",
label = "select frequency",
choices = list("daily" = "daily",
"monthly" = "monthly",
"yearly" = "yearly"), selected = "daily"),
br(),
p("data until:"),
textOutput("last_date")
),
mainPanel(
h2("results"),
plotlyOutput("plot")
)
)
)
# what your computer/server does is defined here
server <- function(input, output) {
# get data
r <- get_stock_data()
# calculate betas based on data frequency
inputB = reactive({
calculate_betas(r, freq = input$frequency, mkt_col = "SPY")
})
output$plot <- renderPlotly({
# means
mu = colMeans(r) * 252 * 100
# betas
b = inputB()
# both to data.frame
df = data.frame(b, mu = mu)
# ols fit
fit <- lm(mu ~ b, data = df)
# plot
fig <- plot_ly(
type = "scatter",
x = b, y = mu,
data = df,
mode = "markers",
text = rownames(df),
showlegend = FALSE,
name = "stock")
fig <- fig %>%
add_lines(x = df$b, y = fitted(fit), name = "ols fit")
fig
})
output$last_date = renderText(as.character(tail(index(r), 1)))
}
# run the app
shinyApp(ui = ui, server = server, options = list(port=3838))
library(shiny)
library(plotly)
source("datafeed.R")
source("helper.R")
# user interface is defined here
ui <- fluidPage(
titlePanel(h1("market betas vs. average returns")),
sidebarLayout(
sidebarPanel(
h2("controls"),
br(),
selectInput("frequency",
label = "select frequency",
choices = list("daily" = "daily",
"monthly" = "monthly",
"yearly" = "yearly"), selected = "daily"),
br(),
p("data until:"),
textOutput("last_date")
),
mainPanel(
h2("results"),
plotlyOutput("plot")
)
)
)
# what your computer/server does is defined here
server <- function(input, output) {
# get data
r <- get_stock_data()
# calculate betas based on data frequency
inputB = reactive({
calculate_betas(r, freq = input$frequency, mkt_col = "SPY")
})
output$plot <- renderPlotly({
# means
mu = colMeans(r) * 252 * 100
# betas
b = inputB()
# both to data.frame
df = data.frame(b, mu = mu)
# ols fit
fit <- lm(mu ~ b, data = df)
# plot
fig <- plot_ly(
type = "scatter",
x = b, y = mu,
data = df,
mode = "markers",
text = rownames(df),
showlegend = FALSE,
name = "stock")
fig <- fig %>%
add_lines(x = df$b, y = fitted(fit), name = "ols fit")
fig
})
output$last_date = renderText(as.character(tail(index(r), 1)))
}
# run the app
shinyApp(ui = ui, server = server, options = list(port=3838))
library(shiny)
library(plotly)
source("datafeed.R")
source("helper.R")
r <- get_stock_data()
View(r)
# Load packages
library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
# Load data (how?)
clean_gdp_data_US <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_gdp_data.csv")
clean_stock_data_spy500 <- read_csv("https://raw.githubusercontent.com/tillfurger/stock_vs_gdp/master/data/processed/clean_stock_data.csv")
#add variable defining interval of values
clean_gdp_data_US$interval <- "Quarterly"
clean_stock_data_spy500$interval <- "Quarterly"
clean_gdp_data_US$type <- "US_gdp"
clean_stock_data_spy500$type <- "spy500"
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
titlePanel("Stock vs Gdp"),
sidebarLayout(                              #layout with input and output definitions
sidebarPanel(                             #sidebar panel for inputs
# Select type of data to plot
selectInput(inputId = "Interval", label = strong("Interval"),
choices = unique(clean_gdp_data_US$interval),
selected = "Quarterly"),
# # Select date range to be plotted
# dateRangeInput("date", strong("Date range"), start = "2000-01-01", end = "2022-11-01",
#                min = "2000-01-01", max = "2022-11-01"),
),
# Output: Description, lineplot, and reference (main panel for displaying outputs)
mainPanel(
plotOutput(outputId = "lineplot", height = "300px"),
textOutput(outputId = "desc"),
)
)
)
# Define server function
server <- function(input, output) {
# Subset data
selected_intervals <- reactive({
clean_gdp_data_US %>%
filter(interval == input$Interval)
})
# Create scatterplot object the plotOutput function is expecting
output$lineplot <- renderPlot({
color = "#434343"
par(mar = c(4, 4, 1, 1))
plot(x = selected_intervals()$date, y = selected_intervals()$value, type = "l",
xlab = "Date", ylab = "GDP", col = color, fg = color, col.lab = color, col.axis = color)
# Display only if smoother is checked
# if(input$smoother){
#   smooth_curve <- lowess(x = as.numeric(selected_intervals()$date), y = selected_intervals()$close, f = input$f)
#   lines(smooth_curve, col = "#E6553A", lwd = 3)
# }
})
# # Pull in description of interval
# output$desc <- renderText({
#   interval_text <- filter(clean_gdp_data, type == input$Interval) %>% pull(Interval)
#   paste(interval_text, "Blabla.")
# })
}
# Create Shiny object
shinyApp(ui = ui, server = server)
install.packages("rjson")
